{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["cache","loadImage","url","Promise","resolve","img","Image","p","done","onload","src","setMousePos","set","e","target","getBoundingClientRect","left","top","clientX","clientY","console","log","x","y","MyDropzone","onLoad","useState","images","setImages","onDrop","useCallback","files","loaded","file","reader","FileReader","data","result","push","length","readAsDataURL","useDropzone","getRootProps","getInputProps","isDragActive","style","minHeight","map","height","width","margin","border","App","toggle","setToggle","ref","useRef","useEffect","current","a","canvas","ctx","getContext","shouldSwap","img1","img2","b","clearRect","Math","max","naturalWidth","naturalHeight","drawImage","padding","background","onClick","onMouseMove","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a7ab539.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport { useState, useRef, useEffect, useCallback } from 'react';\nimport {useDropzone} from 'react-dropzone'\n\nconst cache = {};\n\nconst loadImage = (url) => {\n  if(cache[url]) return Promise.resolve(cache[url]);\n  var img = new Image();\n  cache[url] = img;\n  const p = new Promise(done => {\n    img.onload = () => {\n      done(img);\n    };\n  });\n  img.src = url;\n  return p;\n}\n\nconst setMousePos = (set) => e => {\n    const el = e.target;\n    const {left, top} = el.getBoundingClientRect()\n    const {clientX, clientY} = e;  \n    console.log('mousemove', clientX, clientY)    \n    set({\n      x: clientX-left, \n      y: clientY-top\n    });\n}\n\nfunction MyDropzone({onLoad}) {\n  const [images, setImages] = useState([]);\n  \n  const onDrop = useCallback(files => {\n    console.log(files);\n    \n    const loaded = [];\n\n    for (const file of files) {\n      const reader = new FileReader();\n\n      reader.onload = () => {\n        const data = reader.result\n        loaded.push(data);\n        if (loaded.length == files.length) {\n          setImages([...images, ...loaded]);\n        }\n      }\n\n      reader.readAsDataURL(file);\n    }\n\n  }, []);\n\n  onLoad(images);\n\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n  return <>\n    <div {...getRootProps()} style={{minHeight:\"200px\"}}>\n      <input {...getInputProps()} />\n      {\n        isDragActive ?\n          <p>Drop in two images of same size here ...</p> :\n          <p>Drag 'n' drop two images of same size here, or click to select files</p>\n      }\n    </div>\n    <div>{images.map(x=>\n      <img \n        src={x} \n        key={x} \n        height={100} \n        width={100} \n        style={{margin: \"5px\", border: \"1px solid black\"}} />\n    )}</div>\n  </>\n}\n\n\n//const lena = \"https://upload.wikimedia.org/wikipedia/en/7/7d/Lenna_%28test_image%29.png\";\n//const lena2 = \"https://boofcv.org/images/c/c1/Example_lena_gaussian_blur.jpg\"\n\nfunction App() {\n  const [images, setImages] = useState([]);\n  const [toggle, setToggle] = useState(0);\n  const [{x,y}, set] = useState({x:512,y:512});\n  const ref = useRef(null);\n\n    useEffect(()=>{\n      if (ref.current && images.length>=2) {\n        (async () => {\n          const canvas = ref.current;\n          const ctx = canvas.getContext(\"2d\");\n          const shouldSwap = (toggle % 4) > 1;\n          const img1 = await loadImage(images[0]);\n          const img2 = await loadImage(images[1]);\n\n          const [a, b] = shouldSwap ? [img1, img2] : [img2, img1]\n\n          ctx.clearRect(0, 0, ref.current.width, ref.current.height);\n\n          const width = Math.max(a.naturalWidth, b.naturalWidth);\n          const height = Math.max(a.naturalHeight, b.naturalHeight);\n\n          canvas.width = width;\n          canvas.height = height;\n          \n          if(toggle % 2) {\n            ctx.drawImage(a, \n              0, 0, \n              x, height, \n              0, 0, \n              x, height);\n\n            ctx.drawImage(b, \n              x, 0, \n              width, height, \n              x, 0, \n              width, height);\n          } else {\n\n            ctx.drawImage(a, \n              0, 0, \n              width, y, \n              0, 0, \n              width, y);\n\n            ctx.drawImage(b, \n              0, y, \n              width, height, \n              0, y, \n              width, height);            \n          }\n        \n        })()\n      }\n    }, [x,y, toggle]);\n  \n\n  return (\n    <>\n      <h1>Image Viewer</h1>\n      <canvas \n        ref={ref}\n        width={512}\n        height={512}\n        style={{border: \"solid 1px black\", margin: \"10px\", padding: \"10px\", background: \"black\"}}\n        onClick={()=>setToggle(toggle+1)}\n        onMouseMove={setMousePos(set)}/>\n      <MyDropzone onLoad={setImages}/>\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}